// Generated by CoffeeScript 1.6.3
var factory, initialize, loadData, mongoose;

require('js-yaml');

mongoose = require('mongoose');

factory = require('./factory');

loadData = function(path, fn) {
  var doc, e, err;
  try {
    doc = require(path);
  } catch (_error) {
    e = _error;
    err = e;
  }
  if (doc) {
    return fn(null, doc);
  } else {
    return fn(err);
  }
};

initialize = function(doc, log) {
  var field, fields, mLog, obj, retval, runLogs;
  runLogs = log != null ? log : true;
  retval = {};
  mLog = function(str) {
    if (runLogs) {
      return console.log(str);
    }
  };
  for (obj in doc.objects) {
    fields = {};
    for (field in doc.objects[obj].fields) {
      fields[field] = eval(doc.objects[obj].fields[field]);
    }
    retval[obj] = factory(obj, fields, doc.objects[obj].methods, doc.objects[obj]["public"]);
  }
  mLog("Establishing database connection");
  mongoose.connect(doc.database, doc["db-options"], function(err) {
    if (!err) {
      return mLog("Successfully connected to database");
    } else {
      return mLog(err);
    }
  });
  mongoose.connection.on('error', function(err) {
    return mLog(err);
  });
  return retval;
};

module.exports = function(path, log, fn) {
  var self;
  self = this;
  self.route = function(app) {
    var attr, _results;
    _results = [];
    for (attr in self.objects) {
      _results.push(self.objects[attr].route(app));
    }
    return _results;
  };
  if (arguments.length === 2) {
    fn = log;
    log = false;
  }
  return loadData(path, function(err, doc) {
    if (err) {
      return fn(err);
    } else {
      self.objects = initialize(doc, log);
      return fn.call(self, null, self.objects);
    }
  });
};
